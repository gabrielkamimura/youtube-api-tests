{
  "_args": [
    [
      {
        "raw": "gulp-replace-task@0.11.0",
        "scope": null,
        "escapedName": "gulp-replace-task",
        "name": "gulp-replace-task",
        "rawSpec": "0.11.0",
        "spec": "0.11.0",
        "type": "version"
      },
      "/Users/gabrielky/Desenvolvimento/base-angular/src"
    ]
  ],
  "_from": "gulp-replace-task@0.11.0",
  "_id": "gulp-replace-task@0.11.0",
  "_inCache": true,
  "_location": "/gulp-replace-task",
  "_nodeVersion": "0.12.7",
  "_npmUser": {
    "name": "outatime",
    "email": "afalduto@gmail.com"
  },
  "_npmVersion": "2.11.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gulp-replace-task@0.11.0",
    "scope": null,
    "escapedName": "gulp-replace-task",
    "name": "gulp-replace-task",
    "rawSpec": "0.11.0",
    "spec": "0.11.0",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-replace-task/-/gulp-replace-task-0.11.0.tgz",
  "_shasum": "3bf5c4f3b0f27457adedeb10747cbb66b2463fdd",
  "_shrinkwrap": null,
  "_spec": "gulp-replace-task@0.11.0",
  "_where": "/Users/gabrielky/Desenvolvimento/base-angular/src",
  "author": {
    "name": "outaTiME",
    "url": "http://outa.im/"
  },
  "bugs": {
    "url": "https://github.com/outaTiME/gulp-replace-task/issues"
  },
  "dependencies": {
    "applause": "1.1.0",
    "gulp-util": "^3.0.0",
    "through2": "^2.0.0"
  },
  "description": "Replace text patterns with applause.",
  "devDependencies": {
    "mocha": "^2.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "3bf5c4f3b0f27457adedeb10747cbb66b2463fdd",
    "tarball": "https://registry.npmjs.org/gulp-replace-task/-/gulp-replace-task-0.11.0.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "69d3d58c7b346608f02bf2976c5a489a20dda76c",
  "homepage": "https://github.com/outaTiME/gulp-replace-task#readme",
  "keywords": [
    "gulpplugin",
    "replace",
    "replacement",
    "pattern",
    "patterns",
    "match",
    "text",
    "string",
    "regex",
    "regexp",
    "json",
    "yaml",
    "cson",
    "flatten"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "outatime",
      "email": "afalduto@gmail.com"
    }
  ],
  "name": "gulp-replace-task",
  "optionalDependencies": {},
  "readme": "# gulp-replace-task [![Build Status](https://img.shields.io/travis/outaTiME/gulp-replace-task.svg)](https://travis-ci.org/outaTiME/gulp-replace-task) [![NPM Version](https://img.shields.io/npm/v/gulp-replace-task.svg)](https://npmjs.org/package/gulp-replace-task)\n\n> Replace text patterns with [applause](https://github.com/outaTiME/applause).\n\n## Install\n\nFrom NPM:\n\n```shell\nnpm install gulp-replace-task --save-dev\n```\n\n## Replace Task\n\nAssuming installation via NPM, you can use `gulp-replace-task` in your gulpfile like this:\n\n```javascript\nvar gulp = require('gulp');\nvar replace = require('gulp-replace-task');\n\ngulp.task('default', function () {\n  gulp.src('src/index.html')\n    .pipe(replace({\n      patterns: [\n        {\n          match: 'foo',\n          replacement: 'bar'\n        }\n      ]\n    }))\n    .pipe(gulp.dest('build'));\n});\n```\n\n### Options\n\n\n\n#### patterns\nType: `Array`\n\nDefine patterns that will be used to replace the contents of source files.\n\n#### patterns.match\nType: `String|RegExp`\n\nIndicates the matching expression.\n\nIf matching type is `String` we use a simple variable lookup mechanism `@@string` (in any other case we use the default regexp replace logic):\n\n```javascript\n{\n  patterns: [\n    {\n      match: 'foo',\n      replacement: 'bar'  // replaces \"@@foo\" to \"bar\"\n    }\n  ]\n}\n```\n\n#### patterns.replacement or patterns.replace\nType: `String|Function|Object`\n\nIndicates the replacement for match, for more information about replacement check out the [String.replace].\n\nYou can specify a function as replacement. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string.\n\n```javascript\n{\n  patterns: [\n    {\n      match: /foo/g,\n      replacement: function () {\n        return 'bar'; // replaces \"foo\" to \"bar\"\n      }\n    }\n  ]\n}\n```\n\nAlso supports object as replacement (we create string representation of object using [JSON.stringify]):\n\n```javascript\n{\n  patterns: [\n    {\n      match: /foo/g,\n      replacement: [1, 2, 3] // replaces \"foo\" with string representation of \"array\" object\n    }\n  ]\n}\n```\n\n[String.replace]: http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n[JSON.stringify]: http://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\n#### patterns.json\nType: `Object`\n\nIf an attribute `json` found in pattern definition we flatten the object using `delimiter` concatenation and each keyâ€“value pair will be used for the replacement (simple variable lookup mechanism and no regexp support).\n\n```javascript\n{\n  patterns: [\n    {\n      json: {\n        \"key\": \"value\" // replaces \"@@key\" to \"value\"\n      }\n    }\n  ]\n}\n```\n\nAlso supports nested objects:\n\n```javascript\n{\n  patterns: [\n    {\n      json: {\n        \"key\": \"value\",   // replaces \"@@key\" to \"value\"\n        \"inner\": {        // replaces \"@@inner\" with string representation of \"inner\" object\n          \"key\": \"value\"  // replaces \"@@inner.key\" to \"value\"\n        }\n      }\n    }\n  ]\n}\n```\n\nFor deferred invocations is possible to define functions:\n\n```javascript\n{\n  patterns: [\n    {\n      json: function (done) {\n        done({\n          key: 'value'\n        });\n      }\n    }\n  ]\n}\n```\n\n#### patterns.yaml\nType: `String`\n\nIf an attribute `yaml` found in pattern definition will be converted and then processed like [json attribute](#patternsjson).\n\n```javascript\n{\n  patterns: [\n    {\n      yaml: 'key: value'  // replaces \"@@key\" to \"value\"\n    }\n  ]\n}\n```\n\nFor deferred invocations is possible to define functions:\n\n```javascript\n{\n  patterns: [\n    {\n      yaml: function (done) {\n        done('key: value');\n      }\n    }\n  ]\n}\n```\n\n#### patterns.cson\nType: `String`\n\nIf an attribute `cson` found in pattern definition will be converted and then processed like [json attribute](#patternsjson).\n\n```javascript\n{\n  patterns: [\n    {\n      cson: 'key: \\'value\\''\n    }\n  ]\n}\n```\n\nFor deferred invocations is possible to define functions:\n\n```javascript\n{\n  patterns: [\n    {\n      cson: function (done) {\n        done('key: \\'value\\'');\n      }\n    }\n  ]\n}\n```\n\n#### variables\nType: `Object`\n\nThis is the old way to define patterns using plain object (simple variable lookup mechanism and no regexp support). You can still use this but for more control you should use the new `patterns` way.\n\n```javascript\n{\n  variables: {\n    'key': 'value' // replaces \"@@key\" to \"value\"\n  }\n}\n```\n\n#### prefix\nType: `String`\nDefault: `@@`\n\nThe prefix added for matching (prevent bad replacements / easy way).\n\n> This only applies for simple variable lookup mechanism.\n\n#### usePrefix\nType: `Boolean`\nDefault: `true`\n\nIf set to `false`, we match the pattern without `prefix` concatenation (useful when you want to lookup an simple string).\n\n> This only applies for simple variable lookup mechanism.\n\n#### preservePrefix\nType: `Boolean`\nDefault: `false`\n\nIf set to `true`, we preserve the `prefix` in target.\n\n> This only applies for simple variable lookup mechanism and `patterns.replacement` is an string.\n\n#### delimiter\nType: `String`\nDefault: `.`\n\nThe delimiter used to flatten when using object as replacement.\n\n#### preserveOrder\nType: `Boolean`\nDefault: `false`\n\nIf set to `true`, we preserve the patterns definition order, otherwise these will be sorted (in ascending order) to prevent replacement issues like `head` / `header` (typo regexps will be resolved at last).\n\n#### detail\nType: `Boolean`\nDefault: `false`\n\nIf set to `true`, return a object response with the `content` and `detail` of replace operation.\n\n\n### Usage Examples\n\n#### Basic\n\nFile `src/manifest.appcache`:\n\n```\nCACHE MANIFEST\n# @@timestamp\n\nCACHE:\n\nfavicon.ico\nindex.html\n\nNETWORK:\n*\n```\n\nGulpfile:\n\n```js\ngulp.task('default', function () {\n  gulp.src('src/manifest.appcache')\n    .pipe(replace({\n      patterns: [\n        {\n          match: 'timestamp',\n          replacement: new Date().getTime()\n        }\n      ]\n    }))\n    .pipe(gulp.dest('build'));\n});\n```\n\n#### Multiple matching\n\nFile `src/manifest.appcache`:\n\n```\nCACHE MANIFEST\n# @@timestamp\n\nCACHE:\n\nfavicon.ico\nindex.html\n\nNETWORK:\n*\n```\n\nFile `src/humans.txt`:\n\n```\n              __     _\n   _    _/__  /./|,//_`\n  /_//_// /_|///  //_, outaTiME v.@@version\n\n/* TEAM */\n  Web Developer / Graphic Designer: Ariel Oscar Falduto\n  Site: http://www.outa.im\n  Twitter: @outa7iME\n  Contact: afalduto at gmail dot com\n  From: Buenos Aires, Argentina\n\n/* SITE */\n  Last update: @@timestamp\n  Standards: HTML5, CSS3, robotstxt.org, humanstxt.org\n  Components: H5BP, Modernizr, jQuery, Twitter Bootstrap, LESS, Jade, Grunt\n  Software: Sublime Text 2, Photoshop, LiveReload\n\n```\n\nGulpfile:\n\n```js\nvar pkg = require('./package.json');\ngulp.task('default', function () {\n  gulp.src(['src/manifest.appcache', 'src/humans.txt'])\n    .pipe(replace({\n      patterns: [\n        {\n          match: 'version',\n          replacement: pkg.version\n        },\n        {\n          match: 'timestamp',\n          replacement: new Date().getTime()\n        }\n      ]\n    }))\n    .pipe(gulp.dest('build'));\n});\n```\n\n#### Cache busting\n\nFile `src/index.html`:\n\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"/css/style.css?rel=@@timestamp\">\n  <script src=\"/js/app.js?rel=@@timestamp\"></script>\n</head>\n```\n\nGulpfile:\n\n```js\ngulp.task('default', function () {\n  gulp.src('src/index.html')\n    .pipe(replace({\n      patterns: [\n        {\n          match: 'timestamp',\n          replacement: new Date().getTime()\n        }\n      ]\n    }))\n    .pipe(gulp.dest('build'));\n});\n```\n\n#### Include file\n\nFile `src/index.html`:\n\n```html\n<body>\n  @@include\n</body>\n```\n\nGulpfile:\n\n```js\nvar fs = require('fs');\ngulp.task('default', function () {\n  gulp.src('src/index.html')\n    .pipe(replace({\n      patterns: [\n        {\n          match: 'include',\n          replacement: fs.readFileSync('./includes/content.html', 'utf8')\n        }\n      ]\n    }))\n    .pipe(gulp.dest('build'));\n});\n```\n\n#### Regular expression\n\nFile `src/username.txt`:\n\n```\nJohn Smith\n```\n\nGulpfile:\n\n```js\ngulp.task('default', function () {\n  gulp.src('src/username.txt')\n    .pipe(replace({\n      patterns: [\n        {\n          match: /(\\w+)\\s(\\w+)/,\n          replacement: '$2, $1' // replaces \"John Smith\" to \"Smith, John\"\n        }\n      ]\n    }))\n    .pipe(gulp.dest('build'));\n});\n```\n\n#### Lookup for `foo` instead of `@@foo`\n\nGulpfile:\n\n```js\ngulp.task('default', function () {\n  gulp.src('src/foo.txt')\n\n    // option 1 (explicitly using an regexp)\n    .pipe(replace({\n      patterns: [\n        {\n          match: /foo/g,\n          replacement: 'bar'\n        }\n      ]\n    }))\n\n    // option 2 (easy way)\n    .pipe(replace({\n      patterns: [\n        {\n          match: 'foo',\n          replacement: 'bar'\n        }\n      ],\n      usePrefix: false\n    }))\n\n    // option 3 (old way)\n    .pipe(replace({\n      patterns: [\n        {\n          match: 'foo',\n          replacement: 'bar'\n        }\n      ],\n      prefix: '' // remove prefix\n    }))\n\n    .pipe(gulp.dest('build'));\n});\n```\n\n## Release History\n\n * 2015-09-09â€ƒâ€ƒâ€ƒv0.11.0â€ƒâ€ƒâ€ƒImprovements in handling patterns. Fix plain object representation issue. More test cases.\n * 2015-08-19â€ƒâ€ƒâ€ƒv0.10.0â€ƒâ€ƒâ€ƒLast [applause](https://github.com/outaTiME/applause) integration and package.json update.\n * 2015-08-06â€ƒâ€ƒâ€ƒv0.2.3â€ƒâ€ƒâ€ƒFix issue with special characters attributes ($$, $&, $`, $', $n or $nn) on JSON, YAML and CSON.\n * 2015-05-07â€ƒâ€ƒâ€ƒv0.2.1â€ƒâ€ƒâ€ƒFix regression issue with empty string in replacement.\n * 2015-05-01â€ƒâ€ƒâ€ƒv0.2.0â€ƒâ€ƒâ€ƒUpdate to [applause](https://github.com/outaTiME/applause) v0.4.0.\n * 2014-10-10â€ƒâ€ƒâ€ƒv0.1.0â€ƒâ€ƒâ€ƒEscape regexp when matching type is `String`.\n * 2014-06-10â€ƒâ€ƒâ€ƒv0.0.6â€ƒâ€ƒâ€ƒRemove node v.8.0 support and third party dependencies updated.\n * 2014-04-20â€ƒâ€ƒâ€ƒv0.0.5â€ƒâ€ƒâ€ƒJSON / YAML / CSON as function supported. Readme updated (thanks [@milanlandaverde](https://github.com/milanlandaverde)).\n * 2014-03-23â€ƒâ€ƒâ€ƒv0.0.4â€ƒâ€ƒâ€ƒReadme updated.\n * 2014-03-22â€ƒâ€ƒâ€ƒv0.0.3â€ƒâ€ƒâ€ƒModular core renamed to [applause](https://github.com/outaTiME/applause). Performance improvements. Expression flag removed. New pattern matching for CSON object. More test cases, readme updated and code cleanup.\n * 2014-03-21â€ƒâ€ƒâ€ƒv0.0.2â€ƒâ€ƒâ€ƒReadme updated and code cleanup.\n * 2014-03-20â€ƒâ€ƒâ€ƒv0.0.1â€ƒâ€ƒâ€ƒInitial version.\n\n---\n\nTask submitted by [Ariel Falduto](http://outa.im/)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/outaTiME/gulp-replace-task.git"
  },
  "scripts": {
    "release": "scripts/release.sh",
    "test": "mocha"
  },
  "version": "0.11.0"
}
