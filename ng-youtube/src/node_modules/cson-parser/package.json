{
  "_args": [
    [
      {
        "raw": "cson-parser@^1.1.0",
        "scope": null,
        "escapedName": "cson-parser",
        "name": "cson-parser",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/Users/gabrielky/Desenvolvimento/base-angular/src/node_modules/applause"
    ]
  ],
  "_from": "cson-parser@>=1.1.0 <2.0.0",
  "_id": "cson-parser@1.3.5",
  "_inCache": true,
  "_location": "/cson-parser",
  "_nodeVersion": "4.7.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/cson-parser-1.3.5.tgz_1482351118459_0.6181118048261851"
  },
  "_npmUser": {
    "name": "groupon",
    "email": "i-tier-devs@groupon.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cson-parser@^1.1.0",
    "scope": null,
    "escapedName": "cson-parser",
    "name": "cson-parser",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/applause"
  ],
  "_resolved": "https://registry.npmjs.org/cson-parser/-/cson-parser-1.3.5.tgz",
  "_shasum": "7ec675e039145533bf2a6a856073f1599d9c2d24",
  "_shrinkwrap": null,
  "_spec": "cson-parser@^1.1.0",
  "_where": "/Users/gabrielky/Desenvolvimento/base-angular/src/node_modules/applause",
  "author": {
    "name": "Groupon",
    "email": "opensource@groupon.com"
  },
  "bugs": {
    "url": "https://github.com/groupon/cson-parser/issues"
  },
  "dependencies": {
    "coffee-script": "^1.10.0"
  },
  "description": "Safe parsing of CSON files",
  "devDependencies": {
    "assertive": "^2.1.0",
    "eslint": "^2.0.0",
    "eslint-config-groupon-es5": "^3.0.0",
    "eslint-plugin-import": "^1.6.1",
    "eslint-plugin-node": "^2.0.0",
    "mocha": "^3.1.2",
    "nlm": "^3.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "7ec675e039145533bf2a6a856073f1599d9c2d24",
    "tarball": "https://registry.npmjs.org/cson-parser/-/cson-parser-1.3.5.tgz"
  },
  "files": [
    "*.js",
    "lib"
  ],
  "gitHead": "fa37e04bc6c516eb76ef01df2d105a413c0253a0",
  "homepage": "https://github.com/groupon/cson-parser",
  "keywords": [
    "cson",
    "parser"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/cson-parser.js",
  "maintainers": [
    {
      "name": "groupon",
      "email": "i-tier-devs@groupon.com"
    },
    {
      "name": "jkrems",
      "email": "jan.krems@gmail.com"
    },
    {
      "name": "khoomeister",
      "email": "chris.khoo@gmail.com"
    }
  ],
  "name": "cson-parser",
  "nlm": {
    "license": {
      "files": [
        "lib"
      ]
    }
  },
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "https://registry.npmjs.org"
  },
  "readme": "# cson-parser\n\nA minimalistic CSON parser. Offers:\n\n* A strict subset of CSON that allows only data\n* Interface is identical to JSON.{parse,stringify}\n* Does not run the code, free of intermediate string representations\n* Sane parse error messages with line/column\n* Regular Expressions are considered data and will be accepted as well\n\nIn addition of pure data it allows for simple arithmetic expressions like\naddition and multiplication.\nThis allows more readable configuration of numbers,\nthe following is a valid strict CSON file:\n\n```coffee\ncachedData:\n  refreshIntervalMs: 5 * 60 * 1000\n```\n\n## Install\n\n`npm install --save cson-parser`\n\n## Usage\n\n```coffee\nCSON = require 'cson-parser'\n# This will print { a: '123' }\nconsole.log CSON.parse \"a: '123'\"\n```\n\n## High-level APIs\n\n`cson-parser` only offers basic parsing and serialization.\nBut there are some great tools if you want more than that:\n\n* [`fs-cson`](https://github.com/charlierudolph/fs-cson), read and write CSON files\n* [`CSON`](https://github.com/bevry/cson), provides file, coffeescript, javascript handling and a CLI\n* [`season`](https://www.npmjs.org/package/season),\n  atom.io's CSON package.\n  Includes CLI tool to convert CSON to JSON\n* [`grunt-cson`](https://www.npmjs.org/package/grunt-cson),\n  converts CSON to JSON as a grunt task\n* [`load-grunt-configs`](https://www.npmjs.org/package/load-grunt-configs),\n  loads grunt config from CSON files (among other formats)\n* [`fetcher`](https://www.npmjs.org/package/fetcher),\n  a declarative way to download (frontend) libraries, supports CSON configs\n* [`csonschema`](https://www.npmjs.org/package/csonschema),\n  parses [JSON Schema](http://json-schema.org) files written in CSON\n\nYou can find more on the\n[npm website](https://preview.npmjs.com/browse/depended/cson-parser).\n\n## FAQ\n\n### Why not just use YAML?\n\nYAML allows for some pretty complex constructs like anchor and alias,\nwhich can behave in unexpected ways, especially with nested objects.\nCSON is simpler while still offering most of the niceties of YAML.\n\n### Why not just use JSON?\n\nJSON doesn't offer multi-line strings and is generally a little noisier.\nAlso sometimes it can be nice to have comments in config files.\n\n### Why not just use CoffeeScript directly?\n\nYou don't want data files being able to run arbitrary code.\nEven when ran in a proper sandbox, `while(true)` is still possible.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/groupon/cson-parser.git"
  },
  "scripts": {
    "posttest": "nlm verify",
    "pretest": "eslint lib test",
    "test": "mocha"
  },
  "version": "1.3.5"
}
